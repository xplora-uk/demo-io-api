import { IDbDto } from '../../../services/db/types';
/*
* This file was generated by a tool.
* Rerun sql-ts to regenerate this file.
*/

/** Access token table */
export interface DtoAccessToken extends IDbDto {
  
  /** Managment id of the app used to issue access token. tbl_app.id */
  'app_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  'client_id': string | null;
  'client_key': string;
  
  /** expire time. unix timestamp */
  'expire_date': number;
  
  /** extra value. json format */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Issue time. unix timestamp */
  'issue_date': number;
  'refresh_token': string | null;
  'rid': string;
  'token': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user managent id. tbl_user.id */
  'user_srl': number;
  'vendor_name': string;
}

/** Access token table SSO */
export interface DtoAccessTokenSso extends IDbDto {
  
  /** Managment id of the app used to issue access token. tbl_app.id */
  'app_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  'client_key': string;
  
  /** expire time. unix timestamp */
  'expire_date': number;
  
  /** extra value. json format */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Issue time. unix timestamp */
  'issue_date': number;
  'rid': string;
  'token': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user managent id. tbl_user.id */
  'user_srl': number;
  'vendor_name': string;
}

/** Voip Access token table */
export interface DtoAccessTokenVoip extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** expire time. unix timestamp */
  'expire_date': number;
  
  /** extra value. json format */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Issue time. unix timestamp */
  'issue_date': number;
  'rid': string;
  'token': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_id': string;
  
  /** user managent id. tbl_user.id */
  'user_srl': number;
  'vendor_name': string;
}

/** Table that stores all step data for a specific age per day */
export interface DtoAgeDayStepHistory extends IDbDto {
  
  /** user age */
  'age': number;
  
  /** Average value of step count versus user. */
  'avg_step_count': number;
  
  /** create time. unix timestamp. */
  'c_date': number;
  
  /** Date of step count. unix timestamp. */
  'day_date': number;
  
  /** management id */
  'id': number;
  
  /** The number of staff members of the same age per day */
  'total_step_count': number;
  
  /** Total number of users */
  'user_count': number;
}

/** Weak signal alert status table */
export interface DtoAlertWeakSignal extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** user mangement id. send user srl. tbl_user.id */
  'child_user_srl': number;
  'date_yyyymmdd': string;
  
  /** extra column */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** user mangement id. receive user srl. tbl_user.id */
  'parent_user_srl': number;
  
  /** today don't show status. 1: don't remind me , 0: remind me */
  'remind_status': number;
  'rid': string;
  
  /** today don't show status. 1: don't show today, 0: show today */
  'today_status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** APN file list table */
export interface DtoApn extends IDbDto {
  
  /** Create date */
  'c_date': Date;
  'description': string | null;
  
  /** Apn xml file id. tbl_files.id */
  'file_id': number;
  
  /** Management id */
  'id': number;
  'rid': string;
  
  /** Status. 1: Enable, 3: Disable */
  'status': number;
  
  /** Update date */
  'u_date': Date;
}

/** App table to use the API */
export interface DtoApp extends IDbDto {
  'api_key': string;
  'api_secret': string;
  
  /** create time. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** App Profile File ID */
  'file_id': number | null;
  
  /** management id */
  'id': number;
  'name': string;
  'package_name': string;
  'rid': string;
  
  /** Activation status. 1:Enable, 3:Disable */
  'status': number | null;
  
  /** Terminal type using the app. 1:Web, 2:Android, 3:iOS, 4:Kids watch, 100 : server */
  'terminal_type': number | null;
  
  /** update time. unix timestamp */
  'u_date': number;
}

/** App version table */
export interface DtoAppVersion extends IDbDto {
  
  /** app management id. tbl_app.id */
  'app_id': number;
  
  /** create time. unix timestamp */
  'c_date': number;
  'description': string | null;
  'download_url': string | null;
  
  /** management id */
  'id': number;
  
  /** required update. 1:Yes, 2:No */
  'require_update': number;
  'rid': string;
  
  /** update time. unix timestamp */
  'u_date': number;
  'version': string;
}
export interface DtoAuction extends IDbDto {
  
  /** auction id from bidlogix system */
  'auction_id': number;
  'bid_end': number;
  'bid_min': number;
  'bid_start': number;
  'country': string | null;
  'created_at': Date;
  'end_date': Date;
  
  /** management id */
  'id': number;
  
  /** item id from bidlogix system */
  'item_id': number;
  
  /** auction item name */
  'item_name': string;
  'start_date': Date;
  
  /** item status from bidlogix system */
  'status': number | null;
  'updated_at': Date;
  'winner_email': string;
  
  /** user management id. tbl_user.id */
  'winner_srl': number;
}
export interface DtoAuctionHistory extends IDbDto {
  
  /** auction id from bidlogix system */
  'auction_id': number;
  
  /** auction management id. tbl_auction.id */
  'auction_srl': number;
  'bid': number;
  'bid_date': Date;
  'created_at': Date;
  
  /** management id */
  'id': number;
  
  /** item id from bidlogix system */
  'item_id': number;
  
  /** auction item name */
  'item_name': string;
  'updated_at': Date;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
  'ward_srl': number;
}

/** Auction Items */
export interface DtoAuctionItem extends IDbDto {
  
  /** auction id from bidlogix system */
  'auction_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** item id from bidlogix system */
  'item_id': number;
  'sku': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
}
export interface DtoAuctionStats extends IDbDto {
  
  /** auction id from bidlogix system */
  'auction_id': number;
  
  /** auction management id. tbl_auction.id */
  'auction_srl': number;
  'bid_total': number;
  'bid_xcoin': number;
  'bid_xcoin_total': number;
  'created_at': Date;
  
  /** management id */
  'id': number;
  
  /** item id from bidlogix system */
  'item_id': number;
  
  /** auction item name */
  'item_name': string;
  'updated_at': Date;
}

/** auth clients table */
export interface DtoAuthClients extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'client_id': string;
  'client_secret': string;
  
  /** extra value. json format */
  'extra': Object | null;
  'grants': string | null;
  
  /** management id */
  'id': number;
  'redirect_uris': string | null;
  'rid': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** auth codes table */
export interface DtoAuthCodes extends IDbDto {
  'authorization_code': string | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  'client_id': string | null;
  'expires_at': Date | null;
  
  /** extra value. json format */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  'rid': string;
  'scope': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_id': string | null;
}

/** Campaign table */
export interface DtoCampaign extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'campaign_end_date': number;
  'campaign_start_date': number;
  
  /** movie profile file id on android, ios app card */
  'card_mov_id': number;
  
  /** profile file id on android, ios app card */
  'card_profile_id': number;
  
  /** campaign category id */
  'category_id': number;
  'content_key': string;
  'country_codes': Object | null;
  'description_key': string;
  
  /** Event end date. unix timestamp */
  'end_date': number;
  
  /** extra column. Tag order, support country code is stored as required. */
  'extra': Object | null;
  
  /** Whether to display Hot. 1:display, 2:no display */
  'hot_flag': number;
  
  /** management id */
  'id': number;
  
  /** profile file id on large size */
  'lg_profile_id': number;
  
  /** user order. */
  'list_order': number;
  'name_key': string;
  
  /** Whether to display New. 1:display, 2:no display */
  'new_flag': number;
  'reward_desc_key': string;
  'rid': string;
  'slug': string | null;
  
  /** profile file id on small size */
  'sm_profile_id': number;
  
  /** Event start date. unix timestamp */
  'start_date': number;
  
  /** Status of campaign. 1:Enable, 3:Disable */
  'status': number;
  
  /** Type of campaign */
  'type': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** Number of coins required for user to run campaign */
  'xcoin': number;
}

/** Campaign assets */
export interface DtoCampaignAsset extends IDbDto {
  'asset_key': string;
  
  /** create date. unix timestamp */
  'c_date': number;
  'campaign_id': number | null;
  
  /** Asset file. 0 means no image. tbl_files.id */
  'file_id': number | null;
  
  /** management id */
  'id': number;
  
  /** tbl_lang.id */
  'lang_id': number;
  
  /** Asset large file. 0 means no image. tbl_files.id */
  'lg_file_id': number | null;
  'rid': string;
  
  /** Asset mobile file. 0 means no image. tbl_files.id */
  'sm_file_id': number | null;
  
  /** text type.   - 1 : Campaign title image - 2 : Campaign background image - 3 : Campaign character image - 4 : Campaign banner image - 5 : Campaign trailer */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Campaign avatar table */
export interface DtoCampaignAvatar extends IDbDto {
  
  /** create time. unix timestamp */
  'c_date': number;
  
  /** campaign avatar file id. tbl_files.id */
  'file_id': number;
  
  /** management id */
  'id': number;
  
  /** user order */
  'list_order': number;
  'name': string;
  'rid': string;
  
  /** update time. unix timestamp */
  'u_date': number;
}
export interface DtoCampaignBlogLink extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign management id. tbl_campaign.id */
  'campaign_id': number;
  'description_key': string | null;
  
  /** management id */
  'id': number;
  
  /** web image file id. tbl_files.id */
  'lg_image_id': number;
  'link': string | null;
  'rid': string;
  
  /** app image file id. tbl_files.id */
  'sm_image_id': number;
  
  /** Status of link. 1:Enable, 3:Disable */
  'status': number;
  'title_key': string;
  
  /** post type. 1:Blog, 2:Notice */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Category of campaign table */
export interface DtoCampaignCategory extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** category file id. tbl_files.id */
  'file_id': number;
  
  /** management id */
  'id': number;
  'name_key': string;
  'rid': string;
  
  /** Status of category. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Campaign FAQ table */
export interface DtoCampaignFaq extends IDbDto {
  'answer_text_key': string | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign id. tbl_campaign.id */
  'campaign_id': number;
  
  /** management id */
  'id': number;
  'question_text_key': string | null;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Table of items used in the campaign. Only items that meet the conditions of start time and expiration time with Status enabled are valid. */
export interface DtoCampaignItem extends IDbDto {
  'active_days': Object | null;
  
  /** The time when the item expires. unix timestamp. If 0, there is no expiration time. */
  'active_end_date': number | null;
  
  /** Start time when the item is activated(shown). unix timestamp.  */
  'active_start_date': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Campaign mangement id with item */
  'campaign_id': number;
  
  /** item category type.  - 0 : untyped - 1: general,  - 2 : mission,  - 3 : sudden,  - 4 : reserved1,  - 5 : reserved2, - 6 : reserved3 */
  'category_type': number;
  
  /** Item price */
  'coin': number;
  'description': string | null;
  
  /** extra value. reserved value. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** section large file. 0 means no image. tbl_files.id */
  'lg_file_id': number | null;
  
  /** Forced order in which items are displayed */
  'list_order': number;
  'name_key': string | null;
  'rid': string;
  
  /** section mobile file. 0 means no image. tbl_files.id */
  'sm_file_id': number | null;
  
  /** item status. 1:Enable, 3:Disable */
  'status': number;
  
  /** steps range from */
  'steps_from': number | null;
  
  /** steps range to */
  'steps_to': number | null;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  
  /** Item characteristics. Weight 1. It should be used for development. In the Chinese campaign, it is used as a weight when calculating distance. */
  'weight1': number;
  
  /** Item characteristics. Weight 2. It should be used for development. */
  'weight2': number | null;
  
  /** Item characteristics. Weight 3. It should be used for development. */
  'weight3': number | null;
}

/** User campaign mapping table */
export interface DtoCampaignJoin extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign management id. tbl_campaign.id */
  'campaign_id': number;
  
  /** management id */
  'id': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User game rating table */
export interface DtoCampaignRating extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign management id. tbl_campaign.id */
  'campaign_id': number;
  
  /** management id */
  'id': number;
  
  /** Rating status. 1:Liked, 0:Disliked */
  'rating': number | null;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}
export interface DtoCampaignReward extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign management id. tbl_campaign.id */
  'campaign_id': number;
  'description': string | null;
  
  /** management id */
  'id': number;
  
  /** reward file id on large size. tbl_files.id */
  'lg_file_id': number;
  'name_key': string;
  'rid': string;
  
  /** reward file id on small size. tbl_files.id */
  'sm_file_id': number;
  
  /** Status of reward. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** User score in the campaign */
export interface DtoCampaignScore extends IDbDto {
  
  /** Avatar file ID to use in campaign. zero is not used. */
  'avatar_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign management id */
  'campaign_id': number;
  'country_code': string;
  
  /** distance from current day */
  'distance': number | null;
  
  /** distance from previous day */
  'distance_yesterday': number | null;
  'extra': Object | null;
  
  /** management id */
  'id': number;
  'name': string | null;
  'nickname': string | null;
  
  /** User profile file ID to use in the campaign. zero is not used. tbl_files.id */
  'profile_id': number;
  
  /** user score on campaign */
  'score': string;
  
  /** steps from current day */
  'steps': number | null;
  
  /** steps from previous day */
  'steps_yesterday': number | null;
  
  /** total distance for the campaign */
  'total_distance': number | null;
  
  /** total step count for the campaign */
  'total_step': number | null;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  'user_id': string;
  'user_rid': string;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Campaign sections */
export interface DtoCampaignSection extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** tbl_campaign.id */
  'campaign_id': number;
  
  /** management id */
  'id': number;
  
  /** Section large file. 0 means no image. tbl_files.id */
  'lg_file_id': number;
  'rid': string;
  'section_key': string;
  
  /** Section mobile file. 0 means no image. tbl_files.id */
  'sm_file_id': number;
  'text_key': string;
  
  /** text type.   - 1 : Campaign Intro - 2 : Campaign howItWorks - 3 : Campaign reward - 4 : Campaign Reward Prize - 5 : Campaign trailer */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Campaign tag table */
export interface DtoCampaignTag extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'name_key': string;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
}
export interface DtoCampaignText extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** tbl_lang.id */
  'lang_id': number;
  'multi_text': string | null;
  'rid': string;
  'text_key': string;
  
  /** text type.   - 1 : Campaign category name - 2 : Campain name - 3 : Campain description - 4 : Blog link title - 5 : Blog description - 6 : Tag text - 7 : Card title - 8 : Card sub title - 9 : Card description - 10 : Campaign reward name */
  'type': number;
}

/** Game tokens table for running campaigns */
export interface DtoCampaignToken extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Campaign serial number for game token issuance */
  'campaign_id': number;
  'campaign_rid': string;
  
  /** Number of coins used to receive game tokens */
  'coin': number;
  
  /** expire date. unix timestamp. */
  'expire': number;
  
  /** game token management id */
  'id': number;
  'token': string;
  
  /** Whether the game token is normally used. 1: Yes , 2: No */
  'used': number;
  'user_rid': string;
  
  /** User serial number issued game token. */
  'user_srl': number;
}

/** User Profile Information Table for Campaign */
export interface DtoCampaignUserProfile extends IDbDto {
  
  /** Avatar file ID to use in campaign. zero is not used. tbl_campaign_avatar.id */
  'avatar_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'name': string | null;
  
  /** User profile file ID to use in the campaign. zero is not used. tbl_files.id */
  'profile_id': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_id': string;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User score history table */
export interface DtoCampaignUserScoreHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign management id. tbl_campaign.id */
  'campaign_id': number;
  
  /** management id */
  'id': number;
  'name': string | null;
  
  /** user score on campaign */
  'score': string;
  
  /** score log */
  'score_log': Object | null;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Campaign vouchers */
export interface DtoCampaignVoucher extends IDbDto {
  
  /** The time when the voucher expires. unix timestamp. If 0, there is no expiration time. */
  'active_end_date': number | null;
  
  /** Start time when the voucher is activated(shown). unix timestamp.  */
  'active_start_date': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Campaign mangement id with item */
  'campaign_id': number;
  
  /** Voucher coins */
  'coin': number;
  
  /** management id */
  'id': number;
  
  /** Forced order in which items are displayed */
  'list_order': number;
  'rid': string;
  
  /** Voucher status. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  'voucher_name': string | null;
  'watch_group_name': string | null;
}
export interface DtoCard extends IDbDto {
  'bg_color': string | null;
  
  /** Blog link management id. Zero if not a blog link card. tbl_campaign_blog_link.id */
  'blog_link_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Campaign management ID associated with the card. 0 means no campaign. tbl_campaign.id */
  'campaign_id': number;
  'campaign_rid': string;
  'description_key': string | null;
  
  /** extra column */
  'extra': Object | null;
  'fg_color': string | null;
  
  /** The height of the card. reserved column. */
  'height': number;
  
  /** management id */
  'id': number;
  
  /** Card large images. 0 means no image. tbl_files.id */
  'lg_file_id': number;
  
  /** Card movie. 0 means no mov. tbl_files.id */
  'mov_file_id': number;
  'rid': string;
  
  /** Card small images. 0 means no image. tbl_files.id */
  'sm_file_id': number;
  
  /** Status of card. 1:Enable, 3:Disable */
  'status': number;
  'sub_title_key': string | null;
  'title_key': string | null;
  
  /** card type. 1: campaign(image), 2: campaign(mov), 3: Unsigned campaign header card, 4: campaign ranking, 5: outer link */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** The width of the card. reserved column. */
  'width': number;
}
export interface DtoCardGroup extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** extra column. If a card order is required, the order is saved. support country is required. */
  'extra': Object | null;
  
  /** Whether it is a campaign list or a todo list. 1: campaign list, 2: todo list */
  'group_kind': number;
  
  /** management id */
  'id': number;
  
  /** Any sequence displayed */
  'list_order': number;
  'name': string | null;
  'rid': string;
  
  /** Status of group. 1:Enable, 3:Disable */
  'status': number;
  
  /** card group type
- 1 : static - Normal
- 2 : static - New campaign
- 3 : static - Main campaign
- 4 : static - Blog document
- 5 : static - List of notice document
- 101 : dynamic - List of campaigns not subscribed
- 102 : dynamic - Recommended campaign - By category
- 103 : dynamic - Recommended campaign - By tag
- 104 : dynamic - User Ranking in campaign
- 105 : dynamic - List of unpurchased products */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Carousel items */
export interface DtoCarouselItem extends IDbDto {
  
  /** Blog link management id. Zero if not a blog link carousel. tbl_campaign_blog_link.id */
  'blog_link_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** id of campaign. tbl_campaign.id */
  'campaign_id': number;
  'campaign_rid': string;
  
  /** Carousel item character image. 0 means no image. tbl_files.id */
  'character_file_id': number;
  
  /** management id */
  'id': number;
  
  /** Carousel item desktop background image. 0 means no image. tbl_files.id */
  'lg_file_id': number;
  'rid': string;
  
  /** Carousel item mobile background image. 0 means no image. tbl_files.id */
  'sm_file_id': number;
  
  /** Status of item. 1:Enable, 3:Disable */
  'status': number;
  'title_key': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** group chat room */
export interface DtoChatRoom extends IDbDto {
  
  /** Create date */
  'c_date': Date;
  'description': string | null;
  
  /** Management id */
  'id': number;
  'name': string;
  'owner_user_id': string;
  'rid': string;
  
  /** Status. 1: Enable, 3: Disable */
  'status': number;
  
  /** Update date */
  'u_date': Date;
}

/** Users who joined the group chat room */
export interface DtoChatRoomMember extends IDbDto {
  
  /** Join date */
  'c_date': Date;
  
  /** Management id */
  'id': number;
  
  /** Chat room id */
  'room_id': number;
  
  /** Update date. */
  'u_date': Date;
  
  /** Count of unread messages by users in group chat rooms */
  'unread_count': number | null;
  'user_id': string;
}

/** message in chat room. To minimize the speed issue, no FK was used. It is a partition table based on yyyymm. Data is stored for one month based on the message sending time, and after one month, it is moved to tbl_chat_room_message_backup. */
export interface DtoChatRoomMessage extends IDbDto {
  'arrival_users': string | null;
  
  /** Create date. */
  'c_date': Date;
  
  /** Message detail */
  'extra': Object | null;
  'hidden_users': string | null;
  'msg_type': string;
  'read_users': string | null;
  
  /** Whether to delete the message. If you need to keep the message even if you delete it, use it. Only the creator of the message can delete it. 1: Yes(removed), 2: No */
  'remove_flag': number;
  
  /** Reserved column1 */
  'reserve1': number | null;
  'reserve2': string | null;
  'reserve3': string | null;
  'rid': string;
  
  /** Chat room id. tbl_chat_room.id */
  'room_id': number;
  'sender_user_id': string;
  
  /** Update date. */
  'u_date': Date;
  
  /** Partition key. Message created yyyymm value. yyyymm format. It will be partitioned by this column. */
  'yyyymm': number;
}

/** message in chat room. To minimize the speed issue, no FK was used. It is a partition table based on yyyymm. Data is stored for one month based on the message sending time. Message backup table that is over a month old */
export interface DtoChatRoomMessageBackup extends IDbDto {
  'arrival_users': string | null;
  
  /** Create date. */
  'c_date': Date;
  
  /** Message detail */
  'extra': Object | null;
  'hidden_users': string | null;
  'msg_type': string;
  'read_users': string | null;
  
  /** Whether to delete the message. If you need to keep the message even if you delete it, use it. Only the creator of the message can delete it. 1: Yes(removed), 2: No */
  'remove_flag': number;
  
  /** Reserved column1 */
  'reserve1': number | null;
  'reserve2': string | null;
  'reserve3': string | null;
  'rid': string;
  
  /** Chat room id. tbl_chat_room.id */
  'room_id': number;
  'sender_user_id': string;
  
  /** Update date. */
  'u_date': Date;
  
  /** Partition key. Message created yyyymm value. */
  'yyyymm': number;
}

/** Protected Persons Mapping Table */
export interface DtoChildren extends IDbDto {
  
  /** Approval status. The second guardian must be approved by the first guardian before being connected. 1:Complete, 2:Wating */
  'approval': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management ID of the protected user */
  'child_user_srl': number;
  
  /** children extra */
  'extra': Object | null;
  
  /** Guardian type. 1:First guardian, 2:Second Guardian, 3: Family */
  'guard_flag': number;
  
  /** management id */
  'id': number;
  
  /** A sequence chosen by the user */
  'list_order': number;
  
  /** Guardian user management ID. tbl_user.id */
  'parent_user_srl': number;
  'rid': string;
}

/** A child whose factory reset has been requested by the app. This table is used from the new iot server supporting x6pro. */
export interface DtoChildrenFactoryReset extends IDbDto {
  
  /** The value copied from tbl_children.approval when the app requests factory reset */
  'approval': number;
  
  /** The value copied from tbl_children.c_date when the app requests factory reset */
  'c_date': number;
  
  /** The value copied from tbl_children.child_user_srl when the app requests factory reset */
  'child_user_srl': number;
  
  /** The value copied from tbl_children.extra when the app requests factory reset */
  'extra': Object | null;
  
  /** factory reset processing flag. 1: request factory reset, 2: complete factory reset */
  'factory_reseted': number;
  
  /** The value copied from tbl_children.guard_flag when the app requests factory reset */
  'guard_flag': number;
  
  /** The value copied from tbl_children.id when the app requests factory reset */
  'id': number;
  
  /** The value copied from tbl_children.list_order when the app requests factory reset */
  'list_order': number;
  
  /** The value copied from tbl_children.parent_user_srl when the app requests factory reset */
  'parent_user_srl': number;
  
  /** Factory reset request date. Unix timestamp. */
  'request_date': number;
  'rid': string;
}

/** add friend create code */
export interface DtoConfirmCode extends IDbDto {
  
  /** confirm code create date */
  'c_date': number;
  
  /** confirm code for adding fridend */
  'code': number;
  
  /** confirm code expire date */
  'expire_date': number;
  'id': number;
  
  /** watch user id made confirm code */
  'request_user_srl': number;
  'rid': string;
  
  /** 1 - add friend */
  'type': number;
}

/** User contact list table */
export interface DtoContact extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'contact_country_phone_code': string | null;
  'contact_name': string;
  'contact_phone_number': string;
  'contact_type': string | null;
  
  /** contacts user mangement id. If not exist is zero. */
  'contact_user_srl': number;
  
  /** extra column */
  'extra': Object | null;
  
  /** Use as profile image for simple unlisted contacts. If contact_user_srl is not 0 and there is a user profile image, use the user profile. */
  'file_id': number;
  
  /** management id */
  'id': number;
  
  /** A sequence chosen by the user */
  'list_order': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user mangement id. contact owner. tbl_user.id */
  'user_srl': number;
  'vendor_key': string | null;
  'vendor_name': string | null;
}

/** customer query table */
export interface DtoCustomerQuery extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'country_name': string | null;
  'email_address': string | null;
  
  /** management id */
  'id': number;
  'imei': string;
  'inquiry_related_to': string;
  'name': string | null;
  'other_inquiry_text': string | null;
  'phone_model': string;
  'phone_os': string;
  
  /** product purchase from value. json format */
  'product_purchase_from': Object;
  'query': string;
  'rid': string;
  'software_version': string;
  'subject': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user managent id. tbl_user.id */
  'user_srl': number | null;
  'watch_model': string;
}

/** customer query files table */
export interface DtoCustomerQueryFiles extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** customer query managent id. tbl_customer_query.id */
  'customer_query_id': number;
  
  /** customer query file management id. tbl_file.id */
  'file_id': number;
  
  /** management id */
  'id': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** 메일 발송 테이블. 메일 발송 하기 위한 데이터가 들어가는 테이블 이며 발송 처리 되면 tbl_email_send_his 로 데이터 이동 된다. */
export interface DtoEmailSend extends IDbDto {
  
  /** 메일 본문 구분. 1:일반 text, 2:html */
  'body_type': number;
  
  /** 생성일. unix timestamp */
  'c_date': number;
  'cc_email_address': string | null;
  'hcc_email_address': string | null;
  
  /** 관리용 id */
  'id': number;
  
  /** 메일 발송 무시 시간(초단위). send_date + ignore_date 까지 메일 발송 되지 않으면 메일 발송은 무시 된다. 0 이면 무시 시간 없음. 실제 무시 시간은 send_date + ignore_date 로 결정 된다. */
  'ignore_date': number | null;
  'mail_body': string | null;
  'mail_title': string | null;
  
  /** 메일 구분. 1:가입시 발송 메일, 2:비밀번호 찾기 메일, 3:메일 주소변경시 메일 주소 확인용 메일, 100:기타 */
  'mail_type': number;
  'recv_email_address': string;
  'recv_user_id': string;
  'recv_user_name': string;
  'rid': string;
  
  /** 메일 발송 원하는 시간. unix timestamp */
  'send_date': number;
  
  /** 메일 발송 상태. 1:발송 대기, 2:발송 중, 3:발송 성공, 4:발송 실패, 5:발송 취소 */
  'send_status': number;
  'sender_user_id': string;
  'sender_user_name': string;
  
  /** 수정일. unix timestamp */
  'u_date': number | null;
}

/** emoji data table */
export interface DtoEmoji extends IDbDto {
  
  /** Create date. */
  'c_date': Date;
  'description': string | null;
  
  /** Emoji file id. If it is 0, it is a meaningless emoji and data is ignored. */
  'file_id': number;
  
  /** Management id */
  'id': number;
  'name': string;
  'pattern': string;
  'rid': string;
  
  /** Emoji set management id */
  'set_id': number;
  
  /** status. 1: Enable, 3: Disable */
  'status': number;
  
  /** Update date. */
  'u_date': Date;
}

/** Emoji is managed as a set, and currently only one group is supported. That is, if there are several group data, only the last group created is used. Considering the future, the set structure was set. */
export interface DtoEmojiSet extends IDbDto {
  
  /** Create date. */
  'c_date': Date;
  
  /** Management id */
  'id': number;
  'name': string;
  'rid': string;
  
  /** Last time the emoji included in the set was changed. The client decides whether to update the emoji set with this value. */
  'set_updated_date': Date;
  
  /** status. 1: Enable, 3: Disable */
  'status': number;
  
  /** Update date. */
  'u_date': Date;
}

/** Table to temporarily store arrival confirmation when fcm arrival confirmation occurs before insert in tbl_fcm_history_tmp due to DB speed issue */
export interface DtoFcmArrivalTmp extends IDbDto {
  'broadcast_id': string;
  
  /** Create date. Fcm message arrival time. */
  'c_date': Date;
  
  /** It is a value that can be set by read, and the value to be copied to tbl_fcm_history, tbl_fcm_history_tmp as it is when data is cleaned. */
  'extra': Object | null;
  
  /** Index sent by fcm with the same message id */
  'retry_index': number;
  'rid': string;
  'user_id': string;
  
  /** It is used to include not only arrival, but also read. 0: arrival only, 1: arrival, read all done */
  'with_read_flag': number;
  
  /** FCM sending Year Month. yyyymm format. It will be partitioned by this column. */
  'yyyymm': number;
}

/** Data moved from table tbl_fcm_history_tmp */
export interface DtoFcmHistory extends IDbDto {
  
  /** the time the message reached the recipient. If null, not reached. */
  'arrival_date': Date | null;
  
  /** Whether the FCM has reached the recipient. 1: arrival, 2: not arrival */
  'arrival_flag': number;
  'broadcast_id': string;
  
  /** Create date. Fcm send date. */
  'c_date': Date;
  'client_id': string | null;
  
  /** Extra values. Stores specific values (message read/confirm results, etc.) received through REST API */
  'extra': Object | null;
  'fcm_err_code': string;
  'fcm_err_msg': string;
  
  /** FCM MulticastMessage data for resend. Since MulticastMessage is used when sending to multiple people, MulticastMessage is also used when sending to one person. It include fcm token. You can use the FCM resending data as it is. Do not resend if there is no value. */
  'fcm_msg': Object | null;
  'fcm_msg_id': string;
  
  /** FCM seding results. 1: Success, 2: Fail */
  'fcm_send_flag': number;
  
  /** Maximum number of retries to send a message. */
  'limit_retry_count': number;
  'push_vendor': string;
  
  /** Time the recipient viewed the message. If null, not read. */
  'read_date': Date | null;
  
  /** Whether the recipient has read the FCM. 1: read, 2: not read */
  'read_flag': number;
  
  /** Index sent by fcm with the same message id */
  'retry_index': number;
  'rid': string;
  
  /** Update date. If c_date same, not updated. */
  'u_date': Date;
  'user_id': string;
  
  /** FCM sending Year Month. yyyymm format. It will be partitioned by this column. */
  'yyyymm': number;
}

/** Temporary table to use when sending FCM. Data is moved to the tbl_fcm_history table two days after sending the message. */
export interface DtoFcmHistoryTmp extends IDbDto {
  
  /** the time the message reached the recipient. If null, not reached. */
  'arrival_date': Date | null;
  
  /** Whether the FCM has reached the recipient. 1: arrival, 2: not arrival */
  'arrival_flag': number;
  'broadcast_id': string;
  
  /** Create date. Fcm send date. */
  'c_date': Date;
  'client_id': string | null;
  
  /** Extra values. Stores specific values (message read/confirm results, etc.) received through REST API */
  'extra': Object | null;
  'fcm_err_code': string;
  'fcm_err_msg': string;
  
  /** FCM MulticastMessage data for resend. Since MulticastMessage is used when sending to multiple people, MulticastMessage is also used when sending to one person. It include fcm token. You can use the FCM resending data as it is. Do not resend if there is no value. */
  'fcm_msg': Object | null;
  'fcm_msg_id': string;
  
  /** FCM seding results. 1: Success, 2: Fail */
  'fcm_send_flag': number;
  
  /** Maximum number of retries to send a message. */
  'limit_retry_count': number;
  'push_vendor': string;
  
  /** Time the recipient viewed the message. If null, not read. */
  'read_date': Date | null;
  
  /** Whether the recipient has read the FCM. 1: read, 2: not read */
  'read_flag': number;
  
  /** Index sent by fcm with the same message id */
  'retry_index': number;
  'rid': string;
  
  /** Update date. If c_date same, not updated. */
  'u_date': Date;
  'user_id': string;
  
  /** FCM sending Year Month. yyyymm format. It will be partitioned by this column. */
  'yyyymm': number;
}

/** feature flag table */
export interface DtoFeatureFlag extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** is enabled */
  'isEnabled': number | null;
  'lang': Object | null;
  'market': Object | null;
  'name': string;
  'type': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** File table */
export interface DtoFiles extends IDbDto {
  
  /** create time. unix timestamp */
  'c_date': number;
  'content_type': string;
  'description': string | null;
  
  /** extra information */
  'extra': Object | null;
  'file_path': string;
  
  /** Original file size Byte size */
  'file_size': number;
  'file_url_path': string;
  'file_url_path_s3': string | null;
  
  /** Image height when source file is an image */
  'height': number;
  
  /** management id */
  'id': number;
  'ipaddress': string;
  'name': string;
  'orig_name': string;
  'rid': string;
  
  /** Thumbnail image height when original file is an image */
  'thumbnail_height': number | null;
  'thumbnail_path': string | null;
  
  /** Thumbnail file byte size when the original file is an image */
  'thumbnail_size': number | null;
  'thumbnail_url_path': string | null;
  'thumbnail_url_path_s3': string | null;
  
  /** Thumbnail image width when original file is an image */
  'thumbnail_width': number | null;
  
  /** update time. unix timestamp */
  'u_date': number;
  'user_id': string | null;
  
  /** Image width, if the original file is an image */
  'width': number;
}

/** Game monthly rank */
export interface DtoGameMonthlyRank extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** Month (0-11) */
  'month': number | null;
  
  /** reward file id */
  'reward_file_id': number;
  'reward_name_key': string;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user managent id. tbl_user.id */
  'user_srl': number | null;
}

/** Go learn articles */
export interface DtoGolearnArticle extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** category id */
  'category_id': number;
  'content_key': string;
  
  /** article extra information stored in json format. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** image file id on large size */
  'image_file_id': number;
  
  /** articles read count */
  'read_count': number;
  
  /** articles read time */
  'read_time': number;
  'rid': string;
  'slug': string | null;
  'slug_key': string;
  'title_key': string;
  
  /** text type.   - 1 : Article - 2 : Printable */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Golearn Badge table */
export interface DtoGolearnBadge extends IDbDto {
  'badge_number': number | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  'description_key': string;
  
  /** management id */
  'id': number;
  
  /** image file id. tbl_files.id */
  'image_file_id': number | null;
  'name_key': string;
  'rid': string;
  
  /** badge type. 1:Silver, 2:Gold, 3:Platinum */
  'type': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Go learn book files. */
export interface DtoGolearnBookFiles extends IDbDto {
  
  /** book id. tbl_golearn_book.id */
  'book_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** pdf file id */
  'file_id': number;
  
  /** management id */
  'id': number;
  
  /** tbl_lang.id */
  'lang_id': number;
  
  /** resource id */
  'rid': string;
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Go learn book pages. */
export interface DtoGolearnBookPages extends IDbDto {
  
  /** book id. tbl_golearn_book.id */
  'book_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** image file id */
  'image_file_id': number;
  
  /** tbl_lang.id */
  'lang_id': number;
  
  /** book page number . */
  'page_number': number;
  
  /** resource id */
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Go learn books */
export interface DtoGolearnBooks extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** category id */
  'category_id': number;
  
  /** book description. tbl_campaign_text.text_key */
  'description_key': string;
  
  /** management id */
  'id': number;
  
  /** image file id */
  'image_file_id': number;
  
  /** book title. tbl_campaign_text.text_key */
  'name_key': string;
  
  /** resource id */
  'rid': string;
  
  /** book slug */
  'slug': string | null;
  
  /** book type.   - 1 : readable - 2 : writable */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Go learn category and sub category */
export interface DtoGolearnCategory extends IDbDto {
  
  /** articles count */
  'articles_count': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  'description_key': string;
  
  /** category extra information stored in json format. */
  'extra': Object | null;
  
  /** icon file id on small size */
  'icon_file_id': number;
  
  /** management id */
  'id': number;
  
  /** image file id on large size */
  'image_file_id': number;
  'name_key': string;
  
  /** navbar file id on android, ios app card */
  'navbar_file_id': number;
  
  /** parent category id */
  'parent_id': number | null;
  'rid': string;
  'slug': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** User go learn articles */
export interface DtoGolearnUserArticle extends IDbDto {
  
  /** article management id. tbl_golearn_article.id */
  'article_id': number;
  
  /** Read status. 1:true, 2:false */
  'bookmark': number | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** Read status. 1:true, 2:false */
  'is_read': number | null;
  'read_at': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Golearn User Badge table */
export interface DtoGolearnUserBadge extends IDbDto {
  
  /** badge id. tbl_golearn_badge.id */
  'badge_id': number | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  'enable_popup': number;
  
  /** management id */
  'id': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user id. tbl_user.id */
  'user_srl': number | null;
  
  /** xcoin of user amount */
  'xcoin': number;
}

/** User go learn bookmark */
export interface DtoGolearnUserBookmark extends IDbDto {
  
  /** book management id. tbl_golearn_books.id */
  'book_id': number;
  
  /** Read status. 1:true, 2:false */
  'bookmark': number | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** type. - 1 : readable - 2 : writable */
  'type': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Go learn user story. */
export interface DtoGolearnUserStory extends IDbDto {
  
  /** book id. tbl_golearn_book.id */
  'book_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** book description */
  'description': string | null;
  
  /** management id */
  'id': number;
  
  /** page id. tbl_golearn_book_pages.id */
  'page_id': number;
  
  /** resource id */
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user id. tbl_user.id */
  'user_srl': number;
}
export interface DtoGoplayPremiumSubscription extends IDbDto {
  'c_date': number;
  'cancellation_reason': string | null;
  'cancels_at': number | null;
  'card_expiry': string | null;
  'card_last_four': string | null;
  'card_type': string | null;
  'currency': string | null;
  'customer_id': string;
  'deleted_at': number | null;
  'description': string | null;
  'duration': string | null;
  'id': number;
  'is_active': number;
  'move_plan_id': string | null;
  'move_pricing_id': string | null;
  'moves_at': number | null;
  'payment_method': string;
  'plan_id': string;
  'price': string | null;
  'pricing_id': string;
  'purchased_by': string | null;
  'renews_at': number | null;
  'reserved': string | null;
  'rid': string;
  'starts_at': number;
  'status': string | null;
  'subscription_id': string;
  'subscription_rid': string;
  'title': string | null;
  'u_date': number | null;
  'user_rid': string;
  'user_srl': number;
}
export interface DtoGoplayPremiumSubscriptionHistory extends IDbDto {
  'action_type': string;
  'c_date': number;
  'cancellation_reason': string | null;
  'customer_id': string | null;
  'id': number;
  'plan_id': string;
  'promo_code': number | null;
  'rid': string;
  'status': string | null;
  'subscription_id': string;
  'subscription_type': string;
  'u_date': number | null;
  'user_id': string;
  'user_srl': number;
}
export interface DtoGroupCard extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** card management id */
  'card_id': number;
  
  /** card group management id */
  'group_id': number;
  
  /** management id */
  'id': number;
}

/** History table */
export interface DtoHistory extends IDbDto {
  'address': string | null;
  
  /** User age */
  'age': number;
  
  /** battery status. if value is larger then 200, that is unknown. */
  'battery': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Campaign id. Zero if there is no value */
  'campaign_srl': number;
  'city': string | null;
  
  /** coin count */
  'coin': number | null;
  'country_code': string | null;
  'country_name': string | null;
  
  /** User management id to be targeted for behaviors */
  'dest_user_srl': number;
  'distance': string | null;
  'extra_key': string;
  
  /** history type.\n\n- 0 : unknown\n- 1 : Login\n- 2 : Logout\n- 3:Addstep\n- 4 : Convert step to coin. The whole step is minus and the coin is plus\n- 5 : Campaign execution\n- 6 : Use coin during campaign\n- 7 : Order product\n- 8 : Product detail log of the order\n- 9 : Read product\n- 10 : Read campaign\n- 11 : Coin use by sending coins. coin is minus\n- 12 : Coin addition by coin reception. coin is plus\n- 13 : Subscribe campaign\n- 14 : Unsubscribe campaign\n- 15 : Subscribe\n- 16 : Unsubscribe\n- 17 : Using Redeem Code\n- 18 : Location\n- 19 : Coin decrease by legacy system.(Maybe buy product in legacy store)\n- 20 : Coin increase by legacy system.(Maybe cancel product purchase)\n-21 :  remove user(before data is in legacy_data)\n-22 :  remove user parent relation(before data is in legacy_data)\n-23 :  remove watch(before data is in legacy_data) */
  'history_type': number;
  
  /** management id */
  'id': number;
  'lat': string | null;
  
  /** legacy extra data, user, parent child relation, watch delete data */
  'legacy_data': Object | null;
  'lng': string | null;
  'locate_type': string | null;
  
  /** If location history, location type.

- 0 : Not defined
- 1 : Location
- 2 : SOS
- 3 : Watch leave from safety zone
- 4 : Watch arrive at safety zone
- 5 : Power on
- 6 : Power off */
  'location_type': number;
  
  /** log date. unix timestamp. */
  'log_date': number;
  'mobile_phone_number': string | null;
  
  /** order management id */
  'order_srl': number;
  'package_name': string | null;
  'phone_number': string | null;
  'poi': string | null;
  
  /** Product id. Zero if there is no value */
  'product_srl': number;
  'province': string | null;
  'radius': string | null;
  'redeem': string;
  
  /** User management id to be sourced for behaviors */
  'src_user_srl': number;
  
  /** user step count */
  'step': number | null;
  'token': string | null;
  
  /** access token expire time. unix timestamp. */
  'token_expire': number | null;
  
  /** user total coin */
  'total_coin': number | null;
  'user_id': string;
  'user_name': string | null;
  
  /** User management ID. Zero if the user cannot be determined */
  'user_srl': number;
}

/** User location history table */
export interface DtoHistoryStep extends IDbDto {
  'address': string | null;
  
  /** User age */
  'age': number;
  
  /** battery status. if value is larger then 200, that is unknown. */
  'battery': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Campaign id. Zero if there is no value */
  'campaign_srl': number;
  'city': string | null;
  
  /** coin count */
  'coin': number | null;
  'country_code': string | null;
  'country_name': string | null;
  
  /** User management id to be targeted for behaviors */
  'dest_user_srl': number;
  'distance': string | null;
  'extra_key': string;
  
  /** history type.

- 0 : unknown
- 1 : Login
- 2 : Logout
- 3:Addstep
- 4 : Convert step to coin. The whole step is minus and the coin is plus
- 5 : Campaign execution
- 6 : Use coin during campaign
- 7 : Order product
- 8 : Product detail log of the order
- 9 : Read product
- 10 : Read campaign
- 11 : Coin use by sending coins. coin is minus
- 12 : Coin addition by coin reception. coin is plus
- 13 : Subscribe campaign
- 14 : Unsubscribe campaign
- 15 : Subscribe
- 16 : Unsubscribe
- 17 : Using Redeem Code
- 18 : Location
- 19 : Coin decrease by legacy system.(Maybe buy product in legacy store)
- 20 : Coin increase by legacy system.(Maybe cancel product purchase) */
  'history_type': number;
  
  /** management id */
  'id': number;
  'lat': string | null;
  
  /** legacy extra data */
  'legacy_data': Object | null;
  'lng': string | null;
  'locate_type': string | null;
  
  /** If location history, location type.

- 0 : Not defined
- 1 : Location
- 2 : SOS
- 3 : Watch leave from safety zone
- 4 : Watch arrive at safety zone
- 5 : Power on
- 6 : Power off */
  'location_type': number;
  
  /** log date. unix timestamp. */
  'log_date': number;
  'mobile_phone_number': string | null;
  
  /** order management id */
  'order_srl': number;
  'package_name': string | null;
  'phone_number': string | null;
  'poi': string | null;
  
  /** Product id. Zero if there is no value */
  'product_srl': number;
  'province': string | null;
  'radius': string | null;
  'redeem': string;
  
  /** User management id to be sourced for behaviors */
  'src_user_srl': number;
  
  /** user step count */
  'step': number | null;
  'token': string | null;
  
  /** access token expire time. unix timestamp. */
  'token_expire': number | null;
  
  /** user total coin */
  'total_coin': number | null;
  'user_id': string;
  'user_name': string | null;
  
  /** User management ID. Zero if the user cannot be determined */
  'user_srl': number;
}

/** History table */
export interface DtoHistoryTmp2 extends IDbDto {
  'address': string | null;
  
  /** User age */
  'age': number;
  
  /** battery status. if value is larger then 200, that is unknown. */
  'battery': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Campaign id. Zero if there is no value */
  'campaign_srl': number;
  'city': string | null;
  
  /** coin count */
  'coin': number | null;
  'country_code': string | null;
  'country_name': string | null;
  
  /** User management id to be targeted for behaviors */
  'dest_user_srl': number;
  'distance': string | null;
  'extra_key': string;
  
  /** history type.

- 0 : unknown
- 1 : Login
- 2 : Logout
- 3:Addstep
- 4 : Convert step to coin. The whole step is minus and the coin is plus
- 5 : Campaign execution
- 6 : Use coin during campaign
- 7 : Order product
- 8 : Product detail log of the order
- 9 : Read product
- 10 : Read campaign
- 11 : Coin use by sending coins. coin is minus
- 12 : Coin addition by coin reception. coin is plus
- 13 : Subscribe campaign
- 14 : Unsubscribe campaign
- 15 : Subscribe
- 16 : Unsubscribe
- 17 : Using Redeem Code
- 18 : Location
- 19 : Coin decrease by legacy system.(Maybe buy product in legacy store)
- 20 : Coin increase by legacy system.(Maybe cancel product purchase) */
  'history_type': number;
  
  /** management id */
  'id': number;
  'lat': string | null;
  
  /** legacy extra data */
  'legacy_data': Object | null;
  'lng': string | null;
  'locate_type': string | null;
  
  /** If location history, location type.

- 0 : Not defined
- 1 : Location
- 2 : SOS
- 3 : Watch leave from safety zone
- 4 : Watch arrive at safety zone
- 5 : Power on
- 6 : Power off */
  'location_type': number;
  
  /** log date. unix timestamp. */
  'log_date': number;
  'mobile_phone_number': string | null;
  
  /** order management id */
  'order_srl': number;
  'package_name': string | null;
  'phone_number': string | null;
  'poi': string | null;
  
  /** Product id. Zero if there is no value */
  'product_srl': number;
  'province': string | null;
  'radius': string | null;
  'redeem': string;
  
  /** User management id to be sourced for behaviors */
  'src_user_srl': number;
  
  /** user step count */
  'step': number | null;
  'token': string | null;
  
  /** access token expire time. unix timestamp. */
  'token_expire': number | null;
  
  /** user total coin */
  'total_coin': number | null;
  'user_id': string;
  'user_name': string | null;
  
  /** User management ID. Zero if the user cannot be determined */
  'user_srl': number;
}

/** History voip table */
export interface DtoHistoryVoip extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'call_id': string;
  
  /** callee user srl */
  'callee_user_srl': number;
  
  /** caller user srl */
  'caller_user_srl': number;
  'description': string | null;
  
  /** History voip Information. Saved in JSON format. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** voip status. 1:Prepare connect, 2:Send registration token from server to callee, 3:Callee completed token registration, 4:Send caller completed prepare to connect */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}
export interface DtoImei extends IDbDto {
  'c_date': number;
  'eid': string | null;
  'group_name': string;
  
  /** management id */
  'id': number;
  'imei': string;
  'os_version': string | null;
  'qr_code': string;
  'rid': string;
  'service_name': string | null;
  
  /** vendor imei status. 1: can active, 2: can follow, 3: invalid qr, 4: follower count of the watch exceed limit, 5: already bound this watch */
  'status': number;
  'u_date': number | null;
  'vendor_name': string;
}

/** Sms sent limit on ip daily */
export interface DtoIpSmsLimit extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'ipaddress': string;
  'rid': string;
  
  /** sms sent count */
  'sms_count': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'yyyymmdd': string;
}

/** Sms sent limit  history */
export interface DtoIpSmsLimitHistory extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'ipaddress': string;
  'phone_number': string;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  'yyyymmdd': string;
}

/** Support language table */
export interface DtoLang extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** management id */
  'id': number;
  'lang_key': string;
  'name': string;
  'rid': string;
}

/** Marketing Campaigns */
export interface DtoMarketingCampaign extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'campaign_code': string | null;
  'channel_codes': string | null;
  'description_locale_id': string | null;
  
  /** management id */
  'id': number;
  
  /** increment per campaign */
  'last_visitor_num': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Marketing Campaigns Visitors */
export interface DtoMarketingCampaignVisitor extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign id tbl_marketing_campaign.id */
  'campaign_id': number | null;
  'channel_code': string | null;
  
  /** 0 or 1, default 0 */
  'clicked': number;
  
  /** 0 or 1, default 0 */
  'converted': number;
  
  /** management id */
  'id': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** tbl_user.id */
  'user_srl': number;
  
  /** 1 to 5 */
  'visits': number;
}

/** Media table */
export interface DtoMedia extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description_key': string;
  
  /** media extra information stored in json format. */
  'extra': Object | null;
  
  /** media exe file id */
  'file_id': number;
  
  /** management id */
  'id': number;
  
  /** media image file id */
  'image_file_id': number;
  'name_key': string;
  'rid': string;
  
  /** media type. 1:watch face 2:ringtone */
  'type': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** Number of coins required for user to purchase */
  'xcoin': number;
}

/** Media assets table */
export interface DtoMediaAsset extends IDbDto {
  'asset_key': string;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Asset file. 0 means no image. tbl_files.id */
  'file_id': number | null;
  
  /** management id */
  'id': number;
  
  /** tbl_lang.id */
  'lang_id': number;
  
  /** Asset large file. 0 means no image. tbl_files.id */
  'lg_file_id': number | null;
  'media_id': number | null;
  'rid': string;
  
  /** Asset mobile file. 0 means no image. tbl_files.id */
  'sm_file_id': number | null;
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Media text table */
export interface DtoMediaText extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** tbl_lang.id */
  'lang_id': number;
  'multi_text': string | null;
  'rid': string;
  'text_key': string;
  
  /** text type.   - 1 : Media title - 2 : Media description */
  'type': number;
}

/** Menu list of role table */
export interface DtoMenus extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** A sequence chosen by the user */
  'list_order': number;
  'menu_id': string;
  'name': string | null;
  'rid': string;
  
  /** tbl_role.id */
  'role_id': number;
  
  /** status. 1:Enable, 3:Disable */
  'status': number;
  
  /** Whether it is a system menu. This menu is used by the system without being shown to the user. 1:Yes, 2:No */
  'system': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'url': string | null;
}
export interface DtoNewsletter extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'country': string;
  'email_address': string | null;
  
  /** management id */
  'id': number;
  'message': string | null;
  'name': string;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
}
export interface DtoNotice extends IDbDto {
  'column_9': number | null;
  'content_key': string | null;
  'description_key': string | null;
  'end_date': number | null;
  'file_id': string | null;
  'id': number;
  'name_key': string | null;
  'notice_type': number;
  'start_date': number | null;
}
export interface DtoPayCard extends IDbDto {
  
  /** pay card - price for paid card */
  'buy_price': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** pay card file id on large size. tbl_files.id */
  'lg_file_id': number;
  'name_key': string;
  'rid': string;
  
  /** pay card file id on small size. tbl_files.id */
  'sm_file_id': number;
  
  /** pay card status. 1:Enable, 3:Disable */
  'status': number;
  
  /** pay card type. 1: free card, 2: paid card */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Fcm push history table */
export interface DtoPushHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'customer_name': string | null;
  
  /** Whether to delete the message. 1: Yes (delete), 2: No (do not delete) */
  'delete_flag': number;
  
  /** Whether you sent in test mode. 1: Yes (sent in test mode), 2: No */
  'dry_mode': number;
  
  /** fcm data data. Mainly used for deep linking. */
  'extra': Object | null;
  'fcm_err_code': string | null;
  'fcm_err_msg': string | null;
  'fcm_msg_id': string;
  'fcm_token': string;
  'file_url': string | null;
  
  /** management id */
  'id': number;
  'msg_body': string | null;
  'msg_title': string | null;
  'mult_msg_file_name': string | null;
  
  /** Message number at the time of broadcast transmission. Different message numbers are mapped to the same ras_msg_id. */
  'multi_pos': number;
  'ras_msg_id': string;
  
  /** message read date. unix timestamp. */
  'read_date': number;
  
  /** Whether to read messages. 1: Yes (read), 2: No (not read) */
  'read_flag': number;
  'rid': string;
  
  /** Whether the message was sent successfully. 1: Success, 2: Failure, 3: Ready to ship (status just before shipping) */
  'send_result': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_key': string;
  
  /** tbl_user_terminal.id */
  'user_terminal_id': number;
}

/** Fcm push history table */
export interface DtoPushHisOld extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'customer_name': string | null;
  
  /** Whether to delete the message. 1: Yes (delete), 2: No (do not delete) */
  'delete_flag': number;
  
  /** Whether you sent in test mode. 1: Yes (sent in test mode), 2: No */
  'dry_mode': number;
  
  /** fcm data data. Mainly used for deep linking. */
  'extra': Object | null;
  'fcm_err_code': string | null;
  'fcm_err_msg': string | null;
  'fcm_msg_id': string;
  'fcm_token': string;
  'file_url': string | null;
  
  /** management id */
  'id': number;
  'msg_body': string | null;
  'msg_title': string | null;
  'mult_msg_file_name': string | null;
  
  /** Message number at the time of broadcast transmission. Different message numbers are mapped to the same ras_msg_id. */
  'multi_pos': number;
  'ras_msg_id': string;
  
  /** message read date. unix timestamp. */
  'read_date': number;
  
  /** Whether to read messages. 1: Yes (read), 2: No (not read) */
  'read_flag': number;
  'rid': string;
  
  /** Whether the message was sent successfully. 1: Success, 2: Failure, 3: Ready to ship (status just before shipping) */
  'send_result': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_key': string;
  
  /** tbl_user_terminal.id */
  'user_terminal_id': number;
}

/** Push message table */
export interface DtoPushMessage extends IDbDto {
  
  /** tbl_app.id */
  'app_id': number;
  'app_rid': string;
  
  /** Arrival time at Push message terminal. unix timestamp */
  'arrive_date': number;
  
  /** Whether the device receives a message. 1:Yes, 2:No */
  'arrived': number;
  'arrived_url': string | null;
  
  /** create date. unix timestamp. it can treat it as sending time. */
  'c_date': number;
  
  /** Attachment1 File ID. tbl_files.id */
  'file1_id': number;
  
  /** Attachment2 File ID. tbl_files.id */
  'file2_id': number;
  
  /** Attachment3 File ID. tbl_files.id */
  'file3_id': number;
  
  /** management id */
  'id': number;
  'msg': string | null;
  
  /** Push message content. Use for special type messages, msg for plain text */
  'msg_json': Object | null;
  'msg_key': string | null;
  
  /** Message read. 1:Yes, 2:No */
  'read': number;
  
  /** Message read time. unix timestamp */
  'read_date': number;
  'read_url': string | null;
  
  /** Resend Count */
  'resend_count': number;
  
  /** Last resender message time. unix timestamp */
  'resend_date': number;
  'rid': string;
  'sender_name': string | null;
  'sender_user_id': string | null;
  'title': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** tbl_user_apps.id */
  'user_app_id': number;
  'user_id': string;
  'user_rid': string;
}

/** User role table  */
export interface DtoRole extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Whether the default role. Rolep to use as default when no selection is made. 1: Yes, 2: No */
  'default_role': number;
  'description': string | null;
  
  /** Top role management id. tbl_role.id */
  'head_role_id': number;
  
  /** management id */
  'id': number;
  'name': string;
  
  /** Upper role management id. tbl_role.id */
  'parent_role_id': number;
  'rid': string;
  
  /** role status. 1:Enable, 3:Disable */
  'status': number;
  
  /** role type */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}
export interface DtoSimSettingsGroup extends IDbDto {
  'activation_url': string;
  'group_name': string;
  'id': number;
  'instructions_url': string;
}

/** SIM subscription table */
export interface DtoSimSubscription extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'country_phone_code': string | null;
  'customer_id': string | null;
  
  /** user management id. tbl_sw.id */
  'device_id': number;
  'email_address': string | null;
  
  /** Time when this subscription expires */
  'expiration_time': number;
  
  /** management id */
  'id': number;
  'imei': string;
  'mobile_phone_number': string;
  'plan_id': string | null;
  'qr_code': string;
  'rid': string;
  
  /** Time (unix timestamp) when the subscription was activated */
  'starts_at': number;
  'status': string;
  'subscription_id': string | null;
  
  /** Time when this subscription suspended */
  'suspended_at': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
  'vendor_key': string | null;
  'vendor_name': string | null;
}

/** Day step log table */
export interface DtoStepLog extends IDbDto {
  
  /** Create date. Unix timestamp. */
  'c_date': number;
  'country_code': string;
  'country_phone_number': string;
  
  /** Step log data unix time stamp date. */
  'date_tm': number;
  'date_yyyymmdd': string;
  'distance': string;
  
  /** Coin summarized by the step for the time */
  'gave_coin': number;
  
  /** Serial number */
  'id': number;
  
  /** Data from kids watch */
  'orig_data': Object | null;
  'rid': string;
  
  /** Total step of day */
  'step': number;
  'time_zone': string;
  
  /** Update date. Unix timestamp. */
  'u_date': number;
  'user_id': string;
  
  /** User serial number. tbl_user.id */
  'user_srl': number;
}

/** Day step log backup table */
export interface DtoStepLogBackup extends IDbDto {
  
  /** Backup date. Unix timestamp. */
  'backup_date': number;
  
  /** Create date. Unix timestamp. */
  'c_date': number;
  'country_code': string;
  'country_phone_number': string;
  
  /** Step log data unix time stamp date. */
  'date_tm': number;
  'date_yyyymmdd': string;
  'distance': string;
  
  /** Coin summarized by the step for the time */
  'gave_coin': number;
  
  /** Serial number */
  'id': number;
  
  /** Data from kids watch */
  'orig_data': Object | null;
  'rid': string;
  
  /** Total step of day */
  'step': number;
  'time_zone': string;
  
  /** Update date. Unix timestamp. */
  'u_date': number;
  'user_id': string;
  
  /** User serial number. tbl_user.id */
  'user_srl': number;
}

/** Goplay store banner table */
export interface DtoStoreBanner extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** banner click count */
  'click_count': number;
  
  /** banner display start date. unix timestamp */
  'end_date': number;
  
  /** banner extra data */
  'extra': Object | null;
  
  /** banner file id */
  'file_id': number;
  
  /** management id */
  'id': number;
  
  /** tbl_lang.id */
  'lang_id': number;
  'link_url': string | null;
  
  /** A sequence chosen by the user */
  'list_order': number;
  'name': string | null;
  'rid': string;
  
  /** banner display start date. unix timestamp */
  'start_date': number;
  
  /** display status. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Best selling product table. Best selling added a table because it could be set by the administrator arbitrarily. */
export interface DtoStoreBestSelling extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** A sequence chosen by the user */
  'list_order': number;
  
  /** product id. tbl_store_product.id */
  'product_id': number;
  'rid': string;
}

/** User cart to purchase goods. When the order is placed in the cart, the user cart is deleted. */
export interface DtoStoreCart extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** List of items in the cart */
export interface DtoStoreCartProduct extends IDbDto {
  
  /** Count of product */
  'amount': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** cart management id. tbl_store_cart.id */
  'cart_id': number;
  
  /** management id */
  'id': number;
  
  /** product management id. tbl_store_product.id */
  'product_id': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number | null;
}
export interface DtoStoreOpenHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** goplay store close date. unix timestamp */
  'close_date': number;
  
  /** Use this if you want to display a specific value at the store opening time. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** goplay store open date. unix timestamp */
  'open_date': number;
  'rid': string;
  
  /** status. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number | null;
}

/** Product order table.  Orders are created by product. In other words, if you order all three products from a cart containing three products, three orders are created. */
export interface DtoStoreOrderHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'code': string;
  
  /** order extra value */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  'memo': string | null;
  
  /** product count of order. Cannot be less than 1. */
  'product_amount': number;
  
  /** Order price with discount rate. If there is a discount, use it. */
  'product_discount_total_price': number;
  
  /** The product price with the discount. If there is a discount, use it. */
  'product_discount_unit_price': number;
  'product_en_name': string;
  
  /** product management id. tbl_store_product.id */
  'product_id': number;
  
  /** Number of product in stock at the time of order */
  'product_stock': number;
  
  /** Price of order. xcoin count. to be. */
  'product_total_price': number;
  
  /** Price of product. Product is the price of one. xcoin count. to be. */
  'product_unit_price': number;
  'rid': string;
  'shipping_address1': string | null;
  'shipping_address2': string | null;
  'shipping_city': string | null;
  'shipping_country_code': string | null;
  'shipping_phone_number': string | null;
  'shipping_user_name': string | null;
  'shipping_zip_code': string | null;
  
  /** order status. 10: Paid, 20: Cancel, 30: Packed(Dispatch), 40: Fulfilled, 100: Order failed due to lack of XPLORA Coin, 101: TradeGecko transfer failed */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  'user_address1': string | null;
  'user_address2': string | null;
  'user_city': string | null;
  'user_country_code': string | null;
  'user_country_phone_code': string;
  'user_email_address': string | null;
  'user_id': string;
  'user_mobile_phone_number': string | null;
  'user_name': string | null;
  'user_nickname': string | null;
  
  /** The management id of the user who ordered the product */
  'user_srl': number;
  'user_zip_code': string | null;
  'xcoin_spent_user_country_phone_code': string;
  'xcoin_spent_user_email_address': string | null;
  'xcoin_spent_user_id': string;
  'xcoin_spent_user_mobile_phone_number': string | null;
  'xcoin_spent_user_name': string | null;
  'xcoin_spent_user_nickname': string | null;
  
  /** User managemt id using xcoin */
  'xcoin_spent_user_srl': number;
}

/** Order information that was previously ordered (Order, To Address) */
export interface DtoStoreOrderLocation extends IDbDto {
  'address1': string | null;
  'address2': string | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  'city': string | null;
  'country_code': string | null;
  'country_phone_code': string | null;
  'email_address': string | null;
  
  /** management id */
  'id': number;
  'mobile_phone_number': string | null;
  'name': string | null;
  'nickname': string | null;
  
  /** order management id */
  'order_id': number;
  'rid': string;
  
  /** order, receive info division. 1: Order info, 2: Receive info */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  
  /** Management id of the person who ordered the product */
  'user_srl': number;
  'zip_code': string | null;
}

/** Goplay store product table. */
export interface DtoStoreProduct extends IDbDto {
  
  /** Product stock count */
  'amount': number;
  'barcode': string | null;
  
  /** The number of xcoin that a user purchases */
  'buy_price': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  'code': string | null;
  
  /** Number of xcoins to buy without discount when you want to display a discount */
  'compare_price': number;
  'country_codes': Object | null;
  
  /** product extra info. */
  'extra': Object | null;
  
  /** is free shipping? 1:Yes, 2:No */
  'free_shipping_flag': number;
  
  /** hot badge flag. 1:Yes, 2:No */
  'hot_flag': number;
  
  /** management id */
  'id': number;
  'isbn': string | null;
  
  /** A sequence chosen by the user */
  'list_order': number;
  
  /** new badge flag. 1:Yes, 2:No */
  'new_flag': number;
  
  /** customer review count */
  'review_count': number;
  'rid': string;
  'sku': string | null;
  
  /** The rating by the user of the product. It is a value from 1 to 5. Up to one decimal place is supported. */
  'star_grade': number;
  
  /** active flag. 1:Enable, 3:Disable */
  'status': number;
  'supplier': string | null;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** File mapping table included in the product */
export interface DtoStoreProductFile extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** file management id. tbl_files.id */
  'file_id': number;
  
  /** management id */
  'id': number;
  
  /** language id. tbl_lang.id */
  'lang_id': number;
  
  /** File order in the product */
  'list_order': number;
  
  /** ID of the product that contains the file */
  'product_id': number;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number | null;
}

/** Goplay store product multi language support table */
export interface DtoStoreProductText extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** language id. tbl_lang.id */
  'lang_id': number;
  
  /** product id. tbl_store_product.id */
  'product_id': number;
  'rid': string;
  'text': string | null;
  
  /** product text type. 1: Product name, 2: Product description */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Product history viewed by users. Up to n are stored. Currently four. If the maximum number is exceeded, the oldest is deleted and then inserted. */
export interface DtoStoreProductViewHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** product management id. tbl_store_product.id */
  'product_id': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Review comment table */
export interface DtoStoreReviewCommentHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'content': string | null;
  
  /** management id */
  'id': number;
  
  /** Language managent id used when writing the review. tbl_lang.id */
  'lang_id': number;
  'product_en_name': string;
  
  /** product id of review */
  'product_id': number;
  
  /** review management id. tbl_store_review_his.id */
  'review_id': number;
  'rid': string;
  
  /** active flag. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  'user_country_phone_code': string;
  'user_email_address': string | null;
  'user_id': string;
  'user_mobile_phone_number': string | null;
  'user_name': string | null;
  'user_nickname': string | null;
  
  /** comment user management id */
  'user_srl': number;
}

/** Product review table */
export interface DtoStoreReviewHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Number of comments in review */
  'comment_count': number;
  'content': string | null;
  
  /** management id */
  'id': number;
  
  /** Language managent id used when writing the review. tbl_lang.id */
  'lang_id': number;
  'product_en_name': string;
  
  /** product id of review */
  'product_id': number;
  'rid': string;
  
  /** The rating by the reviewed user of the product. It is a value from 1 to 5. Up to one decimal place is supported. */
  'star_grade': number;
  
  /** active flag. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_country_phone_code': string;
  'user_email_address': string | null;
  'user_id': string;
  'user_mobile_phone_number': string | null;
  'user_name': string | null;
  'user_nickname': string | null;
  
  /** Reviewed user management id */
  'user_srl': number;
}

/** Smart watch table */
export interface DtoSw extends IDbDto {
  
  /** 1: activated, 2: wait for activated, 3: deactivated, 100: unknown */
  'activated': number;
  
  /** blocked flag. 1:blocked, 0:unblocked */
  'blocked': number;
  'brand': string | null;
  
  /** create time. unix timestamp */
  'c_date': number;
  'country_phone_code': string | null;
  
  /** extra column */
  'extra': Object | null;
  'flight': number;
  'group_name': string;
  
  /** management id */
  'id': number;
  'name': string | null;
  
  /** online flag. 1:unknown, 2:online, 3:offline */
  'online_status': number;
  
  /** Type of smart watch. 10:ios, 22:Android, 100: Etc */
  'os': number;
  'os_name': string | null;
  'os_version': string | null;
  'phone_number': string | null;
  
  /** 1: Power on, 2: Power off, 100: Unknown */
  'power': number;
  'qr_code': string;
  'rid': string;
  
  /** Status of smart watch. 1:Enable, 3:Disable */
  'status': number;
  'sw_key': string;
  
  /** update time. unix timestamp */
  'u_date': number;
  
  /** management id of watch owner. tbl_user.id */
  'user_srl': number;
  'vendor_key': string;
  'vendor_name': string;
  
  /** whitelist enabled flag. 1:enabled, 0:disabled */
  'whitelist_enabled': number;
}

/** Alarm Table Ringing in Smart Watch. In the 360, alarm data is not connected to the user, but to the kids watch. Because of this, it supports the current state and created both user_srl and device_id for future use, and did not enforce FK. */
export interface DtoSwAlarm extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** management id of smart watch. tbl_sw.id */
  'device_id': number;
  
  /** Alarm end start time. The alarm does not occur after this time. 0 is meaningless. No value indication */
  'end_date': number;
  
  /** extra value */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  'name': string | null;
  'rid': string;
  
  /** Alarm start time. An alarm can occur after this time. 0 is meaningless. No value indication */
  'start_date': number;
  
  /** Status of alarm. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** management id of user. tbl_user.id */
  'user_srl': number;
  'vendor_key': string;
  'vendor_name': string;
  
  /** The time when the alarm sounds when repeating with the day selection. The alarm will sound at 00 hours + minutes as a minute value based on 00 hours. It must be less than 1440. */
  'week_occur_min': number;
  'week_repeat': string | null;
}

/** Day alert table */
export interface DtoSwAlert extends IDbDto {
  
  /** Create date. Unix timestamp. */
  'c_date': number;
  
  /** Device serial number. tbl_user.id */
  'device_srl': number;
  'extra': Object | null;
  
  /** Serial number */
  'id': number;
  'parent_srl': number;
  
  /** APP read flag. 1: read, 2: unread */
  'read_flag': number;
  'rid': string;
  
  /** Alert type. 1: weak signal */
  'type': number;
  
  /** Update date. Unix timestamp. */
  'u_date': number;
  'yyyymmdd': string;
}

/** Smart watch model table */
export interface DtoSwGroup extends IDbDto {
  
  /** create time. unix timestamp. */
  'c_date': number;
  'description': string | null;
  'device_attr': string | null;
  'device_type': string | null;
  
  /** extra column. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  'name': string;
  'rid': string;
  
  /** Status of model. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}
export interface DtoSwLock extends IDbDto {
  'action_by': string;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'reason': string;
  'rid': string;
  
  /** Setting enabled 1:blocked, 2:unblocked */
  'status': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
  
  /** watch management id. tbl_sw.id */
  'watch_srl': number;
}

/** SW Media table */
export interface DtoSwMedia extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** Resource managment id i.e. tbl_media.id */
  'media_id': number;
  'rid': string;
  
  /** Item type. 1:purchased 2:installed */
  'status': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Device medical reminders */
export interface DtoSwMedicalReminder extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Medical reminder description */
  'description': string;
  
  /** management id of smart watch. tbl_sw.id */
  'device_id': number;
  
  /** extra value */
  'extra': Object | null;
  'hour': number;
  
  /** management id */
  'id': number;
  
  /** Medical image identificator */
  'image_name': string;
  
  /** medication type: capsul, injection */
  'medication_type': string;
  'minute': number;
  
  /** Medical reminder name */
  'name': string;
  'quantity': number;
  
  /** resource id */
  'rid': string;
  
  /** Status of reminder. 1:Enable, 3:Disable */
  'status': number;
  
  /** Medical reminder strength */
  'strength': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** Medical reminder units */
  'units': string;
  
  /** management id of user. tbl_user.id */
  'user_srl': number;
  
  /** The vendor alarm ID when the vendor manages the reminder */
  'vendor_key': string;
  
  /** smart watch vendor id. tbl_vendor.name */
  'vendor_name': string;
  
  /** The time when the reminder sounds when repeating with the day selection. The alarm will sound at 00 hours + minutes as a minute value based on 00 hours. It must be less than 1440. */
  'week_occur_min': number;
  
  /** When repeating with the day selection, select the day of the week bit value. 1100000 means Sunday and Monday are selected. */
  'week_repeat': string | null;
}
export interface DtoSwMessage extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** extra column. The format to be saved is defined in the development documentation. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Force ordering */
  'list_order': number;
  'msg_id': string;
  
  /** Flag of reading. 1:Read, 2:Not read */
  'read_flag': number;
  
  /** device management id of receiver. tbl_sw.id. If the system ships, it is fixed to zero */
  'receiver_device_id': number;
  
  /** User management id of the message recipient. tbl_user.id */
  'receiver_user_srl': number;
  'rid': string;
  
  /** device management id of sender. tbl_sw.id. If the system ships, it is fixed to zero */
  'sender_device_id': number;
  'sender_user_name': string | null;
  
  /** The management id of the sender of the message. If the system ships, it is fixed to zero. tbl_user.id */
  'sender_user_srl': number;
  'test_flag': number;
  
  /** message type. - 1 : undefined - 100 : chat emoticon - 101 : chat text - 102 : chat image - 103 : chat voice - 104 : chat mp3 - 200 : call log - 300 : sos - 400 : watch leave from safety zone - 401 : watch arrive at safety zone - 500 : low power - 600 : location - 700 : power on - 701 : power off */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'vendor_key': string;
  'vendor_name': string;
}
export interface DtoSwMessage20210421 extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** extra column. The format to be saved is defined in the development documentation. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Force ordering */
  'list_order': number;
  'msg_id': string;
  
  /** Flag of reading. 1:Read, 2:Not read */
  'read_flag': number;
  
  /** device management id of receiver. tbl_sw.id. If the system ships, it is fixed to zero */
  'receiver_device_id': number;
  
  /** User management id of the message recipient. tbl_user.id */
  'receiver_user_srl': number;
  'rid': string;
  
  /** device management id of sender. tbl_sw.id. If the system ships, it is fixed to zero */
  'sender_device_id': number;
  'sender_user_name': string | null;
  
  /** The management id of the sender of the message. If the system ships, it is fixed to zero. tbl_user.id */
  'sender_user_srl': number;
  
  /** message type. - 1 : undefined - 100 : chat emoticon - 101 : chat text - 102 : chat image - 103 : chat voice - 104 : chat mp3 - 200 : call log - 300 : sos - 400 : watch leave from safety zone - 401 : watch arrive at safety zone - 500 : low power - 600 : location - 700 : power on - 701 : power off */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'vendor_key': string;
  'vendor_name': string;
}
export interface DtoSwMessageMyisam extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** extra column. The format to be saved is defined in the development documentation. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Force ordering */
  'list_order': number;
  'msg_id': string;
  
  /** Flag of reading. 1:Read, 2:Not read */
  'read_flag': number;
  
  /** device management id of receiver. tbl_sw.id. If the system ships, it is fixed to zero */
  'receiver_device_id': number;
  
  /** User management id of the message recipient. tbl_user.id */
  'receiver_user_srl': number;
  'rid': string;
  
  /** device management id of sender. tbl_sw.id. If the system ships, it is fixed to zero */
  'sender_device_id': number;
  'sender_user_name': string | null;
  
  /** The management id of the sender of the message. If the system ships, it is fixed to zero. tbl_user.id */
  'sender_user_srl': number;
  
  /** message type. - 1 : undefined - 100 : chat emoticon - 101 : chat text - 102 : chat image - 103 : chat voice - 104 : chat mp3 - 200 : call log - 300 : sos - 400 : watch leave from safety zone - 401 : watch arrive at safety zone - 500 : low power - 600 : location - 700 : power on - 701 : power off */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'vendor_key': string;
  'vendor_name': string;
}
export interface DtoSwMessageNew extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** extra column. The format to be saved is defined in the development documentation. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Force ordering */
  'list_order': number;
  'msg_id': string;
  
  /** Flag of reading. 1:Read, 2:Not read */
  'read_flag': number;
  
  /** device management id of receiver. tbl_sw.id. If the system ships, it is fixed to zero */
  'receiver_device_id': number;
  
  /** User management id of the message recipient. tbl_user.id */
  'receiver_user_srl': number;
  'rid': string;
  
  /** device management id of sender. tbl_sw.id. If the system ships, it is fixed to zero */
  'sender_device_id': number;
  'sender_user_name': string | null;
  
  /** The management id of the sender of the message. If the system ships, it is fixed to zero. tbl_user.id */
  'sender_user_srl': number;
  'test_flag': number;
  
  /** message type. - 1 : undefined - 100 : chat emoticon - 101 : chat text - 102 : chat image - 103 : chat voice - 104 : chat mp3 - 200 : call log - 300 : sos - 400 : watch leave from safety zone - 401 : watch arrive at safety zone - 500 : low power - 600 : location - 700 : power on - 701 : power off */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'vendor_key': string;
  'vendor_name': string;
}
export interface DtoSwMessageNew20210420 extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** extra column. The format to be saved is defined in the development documentation. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Force ordering */
  'list_order': number;
  'msg_id': string;
  
  /** Flag of reading. 1:Read, 2:Not read */
  'read_flag': number;
  
  /** device management id of receiver. tbl_sw.id. If the system ships, it is fixed to zero */
  'receiver_device_id': number;
  
  /** User management id of the message recipient. tbl_user.id */
  'receiver_user_srl': number;
  'rid': string;
  
  /** device management id of sender. tbl_sw.id. If the system ships, it is fixed to zero */
  'sender_device_id': number;
  'sender_user_name': string | null;
  
  /** The management id of the sender of the message. If the system ships, it is fixed to zero. tbl_user.id */
  'sender_user_srl': number;
  
  /** message type. - 100 : chat emoticon - 101 : chat text - 102 : chat image - 103 : chat voice - 200 : call log - 300 : sos - 400 : watch leave from safety zone - 401 : watch arrive at safety zone - 500 : low power - 600 : location - 700 : power on - 701 : power off */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'vendor_key': string;
  'vendor_name': string;
}
export interface DtoSwMessageNext01 extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'delete_flag': number;
  'deliver_time': number;
  
  /** extra column. The format to be saved is defined in the development documentation. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Force ordering */
  'list_order': number;
  'msg_id': string;
  
  /** Flag of reading. 1:Read, 2:Not read */
  'read_flag': number;
  
  /** device management id of receiver. tbl_sw.id. If the system ships, it is fixed to zero */
  'receiver_device_id': number;
  
  /** User management id of the message recipient. tbl_user.id */
  'receiver_user_srl': number;
  'rid': string;
  
  /** device management id of sender. tbl_sw.id. If the system ships, it is fixed to zero */
  'sender_device_id': number;
  'sender_user_name': string | null;
  
  /** The management id of the sender of the message. If the system ships, it is fixed to zero. tbl_user.id */
  'sender_user_srl': number;
  'test_flag': number;
  
  /** message type. - 1 : undefined - 100 : chat emoticon - 101 : chat text - 102 : chat image - 103 : chat voice - 104 : chat mp3 - 200 : call log - 300 : sos - 400 : watch leave from safety zone - 401 : watch arrive at safety zone - 500 : low power - 600 : location - 700 : power on - 701 : power off */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'vendor_key': string;
  'vendor_name': string;
}
export interface DtoSwMessageOri extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** extra column. The format to be saved is defined in the development documentation. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Force ordering */
  'list_order': number;
  'msg_id': string;
  
  /** Flag of reading. 1:Read, 2:Not read */
  'read_flag': number;
  
  /** device management id of receiver. tbl_sw.id. If the system ships, it is fixed to zero */
  'receiver_device_id': number;
  
  /** User management id of the message recipient. tbl_user.id */
  'receiver_user_srl': number;
  
  /** resource id */
  'rid': string;
  
  /** device management id of sender. tbl_sw.id. If the system ships, it is fixed to zero */
  'sender_device_id': number;
  
  /** Name of the message sender. If sender_user_srl is 0, this is an empty string. */
  'sender_user_name': string | null;
  
  /** The management id of the sender of the message. If the system ships, it is fixed to zero. tbl_user.id */
  'sender_user_srl': number;
  'test_flag': number;
  
  /** message type. - 1 : undefined - 100 : chat emoticon - 101 : chat text - 102 : chat image - 103 : chat voice - 104 : chat mp3 - 200 : call log - 300 : sos - 400 : watch leave from safety zone - 401 : watch arrive at safety zone - 500 : low power - 600 : location - 700 : power on - 701 : power off */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** The vendor message ID when the vendor manages the message, such as 360 */
  'vendor_key': string;
  
  /** The vendor name associated with the vendor key. tbl_vendor.name */
  'vendor_name': string;
}
export interface DtoSwProtect extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** tbl_sw.id */
  'device_id': number;
  'id': number;
  
  /** kids watch protection type. - 0: off, - 1: protection A on, - 2: protection B on */
  'protect': number;
  
  /** kids watch temperature. -1: unknown */
  'temper': string;
  
  /** update date. unix timestamp */
  'u_date': number | null;
}

/** Device reminders */
export interface DtoSwReminder extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id of smart watch. tbl_sw.id */
  'device_id': number;
  
  /** Reminder end start time. The reminder does not occur after this time. 0 is meaningless. No value indication */
  'end_date': number;
  'end_hour': number;
  'end_min': number;
  
  /** extra value */
  'extra': Object | null;
  'hour': number;
  
  /** management id */
  'id': number;
  'interval': number;
  'minute': number;
  
  /** reminder type.

- 0 : unknown
- 1 : Sedentary
- 2: WaterRemainder
- 3:DoNotDisturb */
  'reminder_type': number;
  'rid': string;
  
  /** Reminder start time. A reminder can occur after this time. 0 is meaningless. No value indication */
  'start_date': number;
  'start_hour': number;
  'start_min': number;
  
  /** Status of alarm. 1:Enable, 3:Disable */
  'status': number;
  
  /** Reminder threshold */
  'threshold': number;
  'time': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** management id of user. tbl_user.id */
  'user_srl': number;
  'vendor_key': string;
  'vendor_name': string;
  
  /** The time when the reminder sounds when repeating with the day selection. The alarm will sound at 00 hours + minutes as a minute value based on 00 hours. It must be less than 1440. */
  'week_occur_min': number;
  'week_repeat': string | null;
}

/** Smart watch remove table */
export interface DtoSwRemove extends IDbDto {
  
  /** 1: activated, 2: wait for activated, 3: deactivated, 100: unknown */
  'activated': number;
  'brand': string | null;
  
  /** create time. unix timestamp */
  'c_date': number;
  'country_phone_code': string | null;
  
  /** extra column */
  'extra': Object | null;
  'flight': number;
  'group_name': string;
  
  /** management id */
  'id': number;
  'name': string | null;
  
  /** online flag. 1:unknown, 2:online, 3:offline */
  'online_status': number;
  
  /** Type of smart watch. 10:ios, 22:Android, 100: Etc */
  'os': number;
  'os_name': string | null;
  'os_version': string | null;
  'phone_number': string | null;
  
  /** 1: Power on, 2: Power off, 100: Unknown */
  'power': number;
  'qr_code': string;
  'reset_date': number;
  'rid': string;
  
  /** Status of smart watch. 1:Enable, 3:Disable */
  'status': number;
  'sw_key': string;
  
  /** update time. unix timestamp */
  'u_date': number;
  
  /** management id of watch owner. tbl_user.id */
  'user_srl': number;
  'vendor_key': string;
  'vendor_name': string;
}

/** Safety zone table. In the 360, safety zone data is not connected to the user, but to the kids watch. Because of this, it supports the current state and created both user_srl and device_id for future use, and did not enforce FK. */
export interface DtoSwSafetyZone extends IDbDto {
  'address': string | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** smart watch management id. tbl_sw.id */
  'device_id': number;
  
  /** extra value */
  'extra': Object | null;
  'group_name': string;
  
  /** management id */
  'id': number;
  
  /** Latitude of safety zone */
  'lat': number;
  
  /** safe zone in or out. out: 1, in: 2 */
  'leave_flag': number;
  
  /** Longitude of safety zone */
  'lng': number;
  'name': string | null;
  
  /** Scope of the safety zone. Radius centered on latitude and longitude. meter unit. */
  'radius': number | null;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  
  /** smart watch owner user management id. tbl_user.id */
  'user_srl': number;
  'vendor_key': string;
  'vendor_name': string;
}

/** Safety zone group table */
export interface DtoSwSafetyZoneGroup extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** management id */
  'id': number;
  'name': string;
  'rid': string;
  
  /** Status of safety zone type. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
}

/** Smart watch school time table. In the 360, school mode(silent mode) data is not connected to the user, but to the kids watch. Because of this, it supports the current state and created both user_srl and device_id for future use, and did not enforce FK. */
export interface DtoSwSchoolMode extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** management id of smart watch. tbl_sw.id */
  'device_id': number;
  
  /** minutes passed from 00:00, 366 is 06:06 and 1206 is 20:06. It must be less than 1440. */
  'end_min': number;
  
  /** extra column */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  'rid': string;
  
  /** minutes passed from 00:00, 366 is 06:06 and 1206 is 20:06. It must be less than 1440. */
  'start_min': number;
  
  /** Status of silent time. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** management id of user. tbl_user.id */
  'user_srl': number;
  'vendor_key': string;
  'vendor_name': string;
  'week_repeat': string | null;
}

/** Kids watch wifi table */
export interface DtoSwWifi extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id of smart watch. tbl_sw.id */
  'device_id': number;
  
  /** management id */
  'id': number;
  'name': string | null;
  'passwd': string | null;
  'rid': string;
  'security_type': string | null;
  'ssid': string;
  
  /** wifi state. 0: not sync, 1: sync, 2: can connect */
  'state': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** management id of user. tbl_user.id */
  'user_srl': number;
  'vendor_key': string;
  'vendor_name': string;
}

/** Campaign tag mapping table */
export interface DtoTagCampaign extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign mangement id. tbl_campaign.id */
  'campaign_id': number;
  
  /** management id */
  'id': number;
  
  /** tag management id. tbl_campaign_tag.id */
  'tag_id': number;
}

/** User table */
export interface DtoUser extends IDbDto {
  'address1': string | null;
  'address2': string | null;
  
  /** birth date. unix timestamp. 0 means that the birth value was not entered. */
  'birth': number;
  'birth_str': string | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** last change password date. unix timestamp */
  'change_password_date': number;
  'city': string | null;
  'country_code': string | null;
  'country_phone_code': string;
  
  /** current step count */
  'current_step': number;
  'delivery_type': string | null;
  'description': string | null;
  'email_address': string | null;
  
  /** Whether user email address is verified. 1:Yes, 2:No */
  'email_confirm': number;
  'email_consent': number | null;
  
  /** User Side Information. Saved in JSON format. */
  'extra': Object | null;
  'fax_number': string | null;
  
  /** user profile management id. tbl_file.id */
  'file_id': number | null;
  'first_name': string | null;
  
  /** user gender. 1:male, 2:female, 3:unknown */
  'gender': number;
  'height': string | null;
  
  /** management id */
  'id': number;
  
  /** last login date. unix timestamp */
  'last_login_date': number;
  'last_name': string | null;
  
  /** Since the distance is summed at 360, the final sum distance received */
  'last_sum_distance': number;
  
  /** Since the step is summed at 360, the final sum step count received */
  'last_sum_step': number;
  
  /** timestamp of last sum step. unix timestamp */
  'last_sum_step_date': number;
  
  /** Login consecutive failure count. If login succeeds, it is initialized to 0. */
  'login_fail_count': number;
  'mobile_phone_number': string | null;
  'name': string;
  'nickname': string | null;
  'password': string;
  'phone_number': string | null;
  'reserve1': string | null;
  'reserve2': string | null;
  'reserve3': string | null;
  
  /** reserved column 4 */
  'reserve4': number | null;
  
  /** reserved column 5 */
  'reserve5': number | null;
  'rid': string;
  
  /** user status. 1:Enable, 2:Pause, 3:Disable */
  'status': number;
  
  /** total step count */
  'total_step': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_id': string;
  'user_id_prefix': string | null;
  'vendor_360_account_key': string;
  'vendor_360_device_key': string;
  'vendor_360_salt': string | null;
  'vendor_name': string;
  'weight': string | null;
  
  /** xcoin of user amount */
  'xcoin': number;
  'zip_code': string | null;
}

/** The app mapping table used by the user. In fact, this mapping table exists for sending push messages. */
export interface DtoUserApps extends IDbDto {
  
  /** tbl_app.id */
  'app_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Additional settings for personal apps. Saved in JSON format. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** update date. unix timestamp. 0 means never update */
  'u_date': number;
  
  /** tbl_user.id */
  'user_srl': number;
}

/** User auction token */
export interface DtoUserAuctionToken extends IDbDto {
  
  /** auction user id from bidlogix system */
  'auction_user_srl': number;
  
  /** auction user uuid from bidlogix system */
  'auction_user_uuid': string;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** access token */
  'token': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}
export interface DtoUserCoinLimit extends IDbDto {
  'check_date': number;
  'coin': number | null;
  'id': number;
  'step': number | null;
  'user_srl': number;
}

/** User favourites table */
export interface DtoUserFav extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'fav_rid': string;
  
  /** Resource managment id i.e. tbl_campaign.id or tbl_media.id */
  'favourite_id': number;
  
  /** Favourite type. 1:game 2:watch face 3:ringtone */
  'favourite_type': number | null;
  
  /** management id */
  'id': number;
  'rid': string;
  
  /** Favourite status. 1:favourite 2:unfavourite */
  'status': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Item mapped to user.  You can find items owned and used by users in the table. */
export interface DtoUserItem extends IDbDto {
  
  /** boosted distance */
  'boosted': number | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** The time when the item effect expires when the item is used. unix timestamp. This is a meaningful value only when using an item. unix timestamp. */
  'effect_end_date': number;
  
  /** management id */
  'id': number;
  
  /** campaign item management id. tbl_campaign_item.id */
  'item_id': number;
  'item_rid': string;
  
  /** item multiplier (weight1) */
  'multiplier': number | null;
  'name_key': string | null;
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  
  /** Time spent using the item. unix timestamp. If the item is not used, it is set to 0. */
  'used_date': number;
  
  /** Whether to use the item. 1:used, 2:not used, 3: consumed */
  'used_flag': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User item use and purchase history */
export interface DtoUserItemHis extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** campaign management id. tbl_campaign.id */
  'campaign_id': number;
  'effect_value': string | null;
  
  /** extra value. reserved value. */
  'extra': Object | null;
  
  /** history type. - 1 : item purchase - 2 : item used result - 3 : item auto destory(reseved) - 4 : item send(reserved) - 5 : item receive(reserved) */
  'history_type': number;
  
  /** management id */
  'id': number;
  
  /** campaign item management id. tbl_campaign_item.id */
  'item_id': number;
  
  /** Used when data creation time and history time are different. If it is not meaningful, a value such as c_date is set. unix timestamp. */
  'log_date': number;
  'orig_value': string | null;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User like table */
export interface DtoUserLike extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Item extra information stored in json format. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Resource managment id i.e. tbl_media.id */
  'item_id': number;
  'item_rid': string;
  'rid': string;
  
  /** Favourite status. 1:like 2:dislike */
  'status': number | null;
  
  /** Item type. 1:watch face 2:ringtone */
  'type': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User premium subscription table */
export interface DtoUserPremiumSubscription extends IDbDto {
  
  /** Time (unix timestamp) when the subscription was activated on Goplay */
  'activated_at': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  'email': string | null;
  
  /** Time when this subscription expires */
  'expiration_time': number;
  
  /** management id */
  'id': number;
  'imei': string;
  
  /** subscription status. 0:false, 1:true */
  'is_active': number | null;
  'phone_number': string;
  'rid': string;
  'subscription_id': string;
  
  /** subscription type. 0:test, 1:trial , 2:real */
  'type': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User registered auction */
export interface DtoUserRegisteredAuction extends IDbDto {
  
  /** auction id from bidlogix system */
  'auction_id': number;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** auction registrant id from bidlogix system */
  'registrant_id': number | null;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User remove table */
export interface DtoUserRemove extends IDbDto {
  'address1': string | null;
  'address2': string | null;
  
  /** birth date. unix timestamp. 0 means that the birth value was not entered. */
  'birth': number;
  'birth_str': string | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** last change password date. unix timestamp */
  'change_password_date': number;
  'city': string | null;
  'country_code': string | null;
  'country_phone_code': string;
  
  /** current step count */
  'current_step': number;
  'delivery_type': string | null;
  'description': string | null;
  'email_address': string | null;
  
  /** Whether user email address is verified. 1:Yes, 2:No */
  'email_confirm': number;
  
  /** User Side Information. Saved in JSON format. */
  'extra': Object | null;
  'fax_number': string | null;
  
  /** user profile management id. tbl_file.id */
  'file_id': number | null;
  'first_name': string | null;
  
  /** user gender. 1:male, 2:female, 3:unknown */
  'gender': number;
  'height': string | null;
  
  /** management id */
  'id': number;
  
  /** last login date. unix timestamp */
  'last_login_date': number;
  'last_name': string | null;
  
  /** Since the distance is summed at 360, the final sum distance received */
  'last_sum_distance': number;
  
  /** Since the step is summed at 360, the final sum step count received */
  'last_sum_step': number;
  
  /** timestamp of last sum step. unix timestamp */
  'last_sum_step_date': number;
  
  /** Login consecutive failure count. If login succeeds, it is initialized to 0. */
  'login_fail_count': number;
  'mobile_phone_number': string | null;
  'name': string;
  'nickname': string | null;
  'password': string;
  'phone_number': string | null;
  'reserve1': string | null;
  'reserve2': string | null;
  'reserve3': string | null;
  
  /** reserved column 4 */
  'reserve4': number | null;
  
  /** reserved column 5 */
  'reserve5': number | null;
  'rid': string;
  
  /** user status. 1:Enable, 2:Pause, 3:Disable */
  'status': number;
  
  /** total step count */
  'total_step': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  'user_id': string;
  'vendor_360_account_key': string;
  'vendor_360_device_key': string;
  'vendor_360_salt': string | null;
  'vendor_name': string;
  'weight': string | null;
  
  /** xcoin of user amount */
  'xcoin': number;
  'zip_code': string | null;
}

/** Users reviews */
export interface DtoUserReview extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'review': string | null;
  'rid': string;
  
  /** selection type.

- 0 : unknown
- 1 : Review
- 2: Feedback
- 3:Dont ask again
- 4:Remind me later
- 5:Cancel on feedback */
  'selection': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** management id of user. tbl_user.id */
  'user_srl': number;
}

/** User rewards */
export interface DtoUserReward extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id of campaign. tbl_campaign.id */
  'campaign_id': number;
  'campaign_rid': string;
  
  /** management id */
  'id': number;
  
  /** reward value */
  'reward': number;
  'reward_key': string;
  'rid': string;
  
  /** Range steps from - if required */
  'steps_from': number;
  
  /** Range steps to - if required */
  'steps_to': number;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** management id of user. tbl_user.id */
  'user_srl': number;
}

/** User, group mapping table */
export interface DtoUserRole extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** role management id. tbl_role.id */
  'role_id': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** User settings */
export interface DtoUserSetting extends IDbDto {
  
  /** Setting action key */
  'action_key': string | null;
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Setting enabled 1:true, 2:false */
  'enabled': number | null;
  
  /** management id */
  'id': number;
  
  /** resource id */
  'rid': string;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
  'value': string | null;
}

/** XPLORA Coins statement per user */
export interface DtoUserStatement extends IDbDto {
  
  /** xcoins balance */
  'balance': number | null;
  'c_date': number | null;
  'id': number;
  'rid': string | null;
  
  /** Steps balance */
  'steps': number | null;
  
  /** Transaction types: steps, campaign, order, gift, replacement */
  'transaction_type': number | null;
  'u_date': number | null;
  'user_srl': number | null;
  
  /** xcoins earn/spend */
  'xcoins': number | null;
}

/** Terminal type table used by the user when using the app. Based on this data, you can blow a push. */
export interface DtoUserTerminal extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  'push_token': string | null;
  'terminal_id': string;
  
  /** Separate terminals using apps. 1:Web, 2:Android, 3:iOS */
  'terminal_type': number;
  'terminal_version': string | null;
  
  /** update date. unix timestamp. 0 이면 업데이트 한번도 하지 않았다는 의미 */
  'u_date': number;
  
  /** tbl_user_apps.id */
  'user_app_id': number;
}

/** Vouchers mapped to user. */
export interface DtoUserVoucher extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** management id */
  'id': number;
  
  /** update date. unix timestamp */
  'u_date': number | null;
  'user_id': string | null;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
  
  /** campaign voucher management id. tbl_campaign_voucher.id */
  'voucher_id': number;
  'voucher_name': string | null;
}

/** User wishlist table */
export interface DtoUserWishlist extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  
  /** Item extra information stored in json format. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  
  /** Resource managment id i.e. tbl_media.id */
  'item_id': number;
  'item_rid': string;
  'rid': string;
  
  /** Item type. 1:auction 2:watch face 3:ringtone 4:go brand */
  'type': number | null;
  
  /** update date. unix timestamp */
  'u_date': number;
  
  /** user management id. tbl_user.id */
  'user_srl': number;
}

/** Smart watch provider table */
export interface DtoVendor extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'description': string | null;
  
  /** extra column. */
  'extra': Object | null;
  
  /** management id */
  'id': number;
  'name': string;
  'rid': string;
  
  /** status of vender. 1:Enable, 3:Disable */
  'status': number;
  
  /** update date. unix timestamp */
  'u_date': number | null;
}
export interface DtoVendorImei extends IDbDto {
  'bt': string;
  'c_date': number;
  'device_key': string;
  'eid': string | null;
  'group_name': string;
  
  /** management id */
  'id': number;
  'imei': string;
  'os': string | null;
  'os_name': string | null;
  'os_version': string | null;
  'qr_c': string;
  'qr_code': string;
  'qr_t': string;
  'rid': string;
  'sim_card': number | null;
  'sim_settings_group_id': number | null;
  'sim_subscription': number | null;
  
  /** vendor imei status. 1: can active, 2: can follow, 3: invalid qr, 4: follower count of the watch exceed limit, 5: already bound this watch */
  'status': number;
  'u_date': number | null;
  'vendor_name': string;
}
export interface DtoVendorImeiAuditLog extends IDbDto {
  'action_by': string;
  
  /** create date. unix timestamp */
  'c_date': number;
  'field': string;
  
  /** management id */
  'id': number;
  'new_value': string;
  'old_value': string;
  'reason': string;
  'rid': string;
  
  /** user management id. tbl_user.id */
  'vendor_imei_id': number;
}

/** kidswatch local log file table */
export interface DtoVendorImeiLogs extends IDbDto {
  'action_taken': string | null;
  
  /** create date */
  'c_date': number;
  
  /** tbl_files.id */
  'file_srl': number;
  
  /** management id */
  'id': number;
  'imei': string;
  'reason': string | null;
  'rid': string;
  
  /** update date */
  'u_date': number | null;
  
  /** log upload date */
  'upload_date': number;
}

/** Verification codes logs table */
export interface DtoVerificationCodesLogs extends IDbDto {
  
  /** create date. unix timestamp */
  'c_date': number;
  'country_code': string;
  'email_address': string | null;
  'email_error': string | null;
  'email_response': string | null;
  'email_status': string | null;
  
  /** management id */
  'id': number;
  'message_id': string | null;
  'phone_number': string | null;
  'sid': string | null;
  'sms_error': string | null;
  'sms_response': string | null;
  'sms_status': string | null;
  'verification_code': string | null;
}

/** City information table provided as csv file by weatherbit.io */
export interface DtoWeatherbitCity extends IDbDto {
  
  /** Create date */
  'c_date': Date | null;
  'city_id': string;
  'city_name': string;
  'country_code': string;
  'country_full': string;
  
  /** Management id */
  'id': number;
  'lat': string | null;
  'lon': string | null;
  'state_code': string;
  
  /** Update date */
  'u_date': Date | null;
}

